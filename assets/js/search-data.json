{
  
    
        "post0": {
            "title": "Should 'y' be 2 dimensional in DataLoader()?",
            "content": "Works OK with y.reshape(-1,1) . from fastai.vision.all import * . path = untar_data(URLs.MNIST_SAMPLE) Path.BASE_PATH = path path.ls() . (#3) [Path(&#39;train&#39;),Path(&#39;labels.csv&#39;),Path(&#39;valid&#39;)] . def dl(p, shuffle=False, reshape_y=True): def f(x): return [tensor(Image.open(o)) for o in (x).ls()] X3 = torch.stack(f(path/p/&#39;3&#39;)) X7 = torch.stack(f(path/p/&#39;7&#39;)) y = tensor([1]*len(X3) + [0]*len(X7)) y = y.reshape(-1, 1) if reshape_y==True else y X = torch.cat([X3, X7]).view(-1, 28*28)/255. ds = list(zip(X, y)) dl = DataLoader(ds, batch_size=256, shuffle=shuffle) return dl def dls(shuffle=True, reshape_y=True): return DataLoaders(dl(&#39;train&#39;, shuffle=shuffle, reshape_y=reshape_y), dl(&#39;valid&#39;, reshape_y=reshape_y)) . def batch_accuracy(xb, yb): preds = xb.sigmoid() correct = (preds&gt;0.5) == yb return correct.float().mean() def mnist_loss(predictions, targets): predictions = predictions.sigmoid() return torch.where(targets==1, 1-predictions, predictions).mean() simple_net = nn.Sequential( nn.Linear(28*28,30), nn.ReLU(), nn.Linear(30,1) ) . learn = Learner(dls(shuffle=True, reshape_y=True), simple_net, opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) learn.fit(5, 0.1) #plt.plot(L(learn.recorder.values).itemgot(0)) #plt.plot(L(learn.recorder.values).itemgot(1)) plt.plot(L(learn.recorder.values).itemgot(2)) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.213742 | 0.085770 | 0.966634 | 00:00 | . 1 | 0.102948 | 0.053242 | 0.969087 | 00:00 | . 2 | 0.064131 | 0.044062 | 0.971050 | 00:00 | . 3 | 0.047448 | 0.039272 | 0.971050 | 00:00 | . 4 | 0.038335 | 0.036503 | 0.972522 | 00:00 | . [&lt;matplotlib.lines.Line2D at 0x7f8384dc5d60&gt;] . Doesn&#39;t work without y.reshape(-1,1) . learn = Learner(dls(shuffle=True, reshape_y=False), simple_net, opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) learn.fit(9, 0.1) #plt.plot(L(learn.recorder.values).itemgot(0)) #plt.plot(L(learn.recorder.values).itemgot(1)) plt.plot(L(learn.recorder.values).itemgot(2)) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.498168 | 0.048625 | 0.959964 | 00:00 | . 1 | 0.497918 | 0.048710 | 0.960454 | 00:00 | . 2 | 0.498148 | 0.048844 | 0.959964 | 00:00 | . 3 | 0.497676 | 0.049057 | 0.958982 | 00:00 | . 4 | 0.497721 | 0.049326 | 0.958492 | 00:00 | . 5 | 0.497653 | 0.049653 | 0.958001 | 00:00 | . 6 | 0.498098 | 0.049928 | 0.958545 | 00:00 | . 7 | 0.498131 | 0.050342 | 0.958108 | 00:00 | . 8 | 0.497700 | 0.050720 | 0.957618 | 00:00 | . [&lt;matplotlib.lines.Line2D at 0x7f8384ff3220&gt;] .",
            "url": "https://doyu.github.io/blog/2022/08/05/dataloader_y_shape.html",
            "relUrl": "/2022/08/05/dataloader_y_shape.html",
            "date": " • Aug 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Why 'shuffle' prevents trainng?",
            "content": "from fastai.vision.all import * . path = untar_data(URLs.MNIST_SAMPLE) Path.BASE_PATH = path path.ls() . (#3) [Path(&#39;train&#39;),Path(&#39;labels.csv&#39;),Path(&#39;valid&#39;)] . def dl(p, shuffle=False): def f(x): return [tensor(Image.open(o)) for o in (x).ls()] X3 = torch.stack(f(path/p/&#39;3&#39;)) X7 = torch.stack(f(path/p/&#39;7&#39;)) y = tensor([1]*len(X3) + [0]*len(X7)) X = torch.cat([X3, X7]).view(-1, 28*28)/255. ds = list(zip(X, y)) dl = DataLoader(ds, batch_size=256, shuffle=shuffle) return dl . def batch_accuracy(xb, yb): preds = xb.sigmoid() correct = (preds&gt;0.5) == yb return correct.float().mean() def mnist_loss(predictions, targets): predictions = predictions.sigmoid() return torch.where(targets==1, 1-predictions, predictions).mean() . DataLoaders without shuffle in training . This seems to be working OK as seen below. . dls = DataLoaders(dl(&#39;train&#39;), dl(&#39;valid&#39;)) . simple_net = nn.Sequential( nn.Linear(28*28,30), nn.ReLU(), nn.Linear(30,1) ) learn = Learner(dls, simple_net, opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) learn.fit(5, 0.1) plt.plot(L(learn.recorder.values).itemgot(0)) plt.plot(L(learn.recorder.values).itemgot(1)) plt.plot(L(learn.recorder.values).itemgot(2)) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.337977 | 0.415234 | 0.504416 | 00:00 | . 1 | 0.156038 | 0.238818 | 0.793164 | 00:00 | . 2 | 0.085946 | 0.122527 | 0.906396 | 00:00 | . 3 | 0.056482 | 0.086347 | 0.929848 | 00:00 | . 4 | 0.042997 | 0.070332 | 0.946102 | 00:00 | . [&lt;matplotlib.lines.Line2D at 0x7f46b7a02d00&gt;] . DataLoaders with shuffle in training . Both losses{train, valid} and accuracy doesn&#39;t seem to be converging at all, compared with the above dls without shuffle. . dls = DataLoaders(dl(&#39;train&#39;, shuffle=True), dl(&#39;valid&#39;)) . simple_net = nn.Sequential( nn.Linear(28*28,30), nn.ReLU(), nn.Linear(30,1) ) learn = Learner(dls, simple_net, opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) learn.fit(5, 0.1) plt.plot(L(learn.recorder.values).itemgot(0)) plt.plot(L(learn.recorder.values).itemgot(1)) plt.plot(L(learn.recorder.values).itemgot(2)) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.499775 | 0.493191 | 0.509269 | 00:00 | . 1 | 0.499598 | 0.492406 | 0.504416 | 00:00 | . 2 | 0.499982 | 0.491580 | 0.504416 | 00:00 | . 3 | 0.499273 | 0.491103 | 0.504416 | 00:00 | . 4 | 0.499037 | 0.490632 | 0.504416 | 00:01 | . [&lt;matplotlib.lines.Line2D at 0x7f46b6d69df0&gt;] .",
            "url": "https://doyu.github.io/blog/2022/08/04/dl_shuffle.html",
            "relUrl": "/2022/08/04/dl_shuffle.html",
            "date": " • Aug 4, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Deep Learning from scratch with pytorch (1/N)",
            "content": "from fastai.vision.all import * . path = untar_data(URLs.MNIST_SAMPLE) Path.BASE_PATH = path path.ls() . (#3) [Path(&#39;train&#39;),Path(&#39;labels.csv&#39;),Path(&#39;valid&#39;)] . images = (path/&#39;train&#39;/&#39;3&#39;).ls() images . (#6131) [Path(&#39;train/3/55705.png&#39;),Path(&#39;train/3/32379.png&#39;),Path(&#39;train/3/36132.png&#39;),Path(&#39;train/3/50201.png&#39;),Path(&#39;train/3/39704.png&#39;),Path(&#39;train/3/8475.png&#39;),Path(&#39;train/3/5139.png&#39;),Path(&#39;train/3/32610.png&#39;),Path(&#39;train/3/7784.png&#39;),Path(&#39;train/3/45704.png&#39;)...] . Image.open(images[0]) . a = torch.stack([tensor(Image.open(o)) for o in (path/&#39;train&#39;/&#39;3&#39;).ls()]).reshape(-1, 28*28)/255. b = torch.stack([tensor(Image.open(o)) for o in (path/&#39;train&#39;/&#39;7&#39;).ls()]).reshape(-1, 28*28)/255. X = torch.cat([a, b]) y = tensor([1]*len(a) + [0]*len(b)) a = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;3&#39;).ls()]).reshape(-1, 28*28)/255. b = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;7&#39;).ls()]).reshape(-1, 28*28)/255. X_valid = torch.cat([a, b]) y_valid = tensor([1]*len(a) + [0]*len(b)) X.shape, y.shape, X_valid.shape, y_valid.shape . (torch.Size([12396, 784]), torch.Size([12396]), torch.Size([2038, 784]), torch.Size([2038])) . ds = list(zip(X, y)) dl = DataLoader(ds, batch_size=256, shuffle=True) ds_valid = list(zip(X_valid, y_valid)) dl_valid = DataLoader(ds_valid, batch_size=256) dls = DataLoaders(dl, dl_valid) . weights = torch.randn((28*28, 1)).requires_grad_() bias = torch.randn(1).requires_grad_() weights[:3], bias . (tensor([[-0.4108], [ 0.9965], [ 0.5047]], grad_fn=&lt;SliceBackward0&gt;), tensor([-0.0758], requires_grad=True)) . X[:5]@weights + bias . tensor([[ 5.9452], [10.0471], [-8.5174], [ 7.4015], [ 3.0735]], grad_fn=&lt;AddBackward0&gt;) . W = torch.randn((28*28, 1)).requires_grad_() b = torch.randn(1).requires_grad_() lr = 1. X, t = first(dl) def doit(): y = (lambda x: 1/(1+torch.exp(-x)))(X@W + b) loss = ((t-y)**2).mean() loss.backward() print(loss.item(), W.grad.mean(), b.grad) for p in W, b: p.data -= lr*p.grad p.grad.zero_() for _ in range(3): doit() . 0.429675817489624 tensor(-0.0002) tensor([-0.0027]) 0.4291311502456665 tensor(-0.0002) tensor([-0.0027]) 0.42858171463012695 tensor(-0.0002) tensor([-0.0027]) . W = torch.randn((28*28, 1)).requires_grad_() b = torch.randn(1).requires_grad_() lr = 1. def accuracy(): y = (lambda x: 1/(1+torch.exp(-x)))(X_valid@W + b) return ((y &gt; 0.5)==t).float().mean() for epoch in range(30): for X, t in dl: y = (lambda x: 1/(1+torch.exp(-x)))(X@W + b) loss = ((t-y)**2).mean() loss.backward() for p in W, b: p.data -= lr*p.grad p.grad.zero_() print(epoch, loss.item(), accuracy()) . 0 0.42189547419548035 tensor(0.5064) 1 0.43536025285720825 tensor(0.5000) 2 0.40831637382507324 tensor(0.4987) 3 0.4077708125114441 tensor(0.5011) 4 0.4055875837802887 tensor(0.5067) 5 0.40033259987831116 tensor(0.5110) 6 0.39839795231819153 tensor(0.5065) 7 0.38762959837913513 tensor(0.5020) 8 0.36699414253234863 tensor(0.5065) 9 0.39512205123901367 tensor(0.5059) 10 0.3689902424812317 tensor(0.5048) 11 0.34809964895248413 tensor(0.5012) 12 0.34387949109077454 tensor(0.5050) 13 0.3494081497192383 tensor(0.5050) 14 0.3504391312599182 tensor(0.4992) 15 0.333186537027359 tensor(0.5017) 16 0.32519006729125977 tensor(0.5150) 17 0.31659629940986633 tensor(0.5301) 18 0.3194851875305176 tensor(0.5057) 19 0.31758102774620056 tensor(0.5000) 20 0.3440946042537689 tensor(0.5864) 21 0.36963266134262085 tensor(0.5365) 22 0.30330464243888855 tensor(0.5538) 23 0.33537527918815613 tensor(0.4992) 24 0.3367502987384796 tensor(0.5366) 25 0.3061891496181488 tensor(0.4945) 26 0.3117249011993408 tensor(0.5044) 27 0.39691346883773804 tensor(0.5499) 28 0.3109123110771179 tensor(0.5000) 29 0.338569700717926 tensor(0.4946) .",
            "url": "https://doyu.github.io/blog/2022/08/04/a-Deep_Learning_from_scratch.html",
            "relUrl": "/2022/08/04/a-Deep_Learning_from_scratch.html",
            "date": " • Aug 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Simple Pytorch SGD",
            "content": "import torch import matplotlib.pyplot as plt . params = torch.tensor([-1.,-2.,-3.]) params . tensor([-1., -2., -3.]) . x = torch.arange(-5,5,0.2) y = 2 * x**2 - 1 * x + 3 + torch.randn_like(x) * 5 . def f(param): a, b, c = param y = a * x**2 + b * x + c return y . plt.scatter(x, y) plt.scatter(x, f(params).detach().cpu().numpy(), color=&#39;red&#39;) . &lt;matplotlib.collections.PathCollection at 0x7faf55fcb1f0&gt; . params.requires_grad_() . tensor([-1., -2., -3.], requires_grad=True) . origs = params.clone() origs . tensor([-1., -2., -3.], grad_fn=&lt;CloneBackward0&gt;) . def mse(): return ((y-f(params))**2).mean() . loss = mse() loss . tensor(1542.2339, grad_fn=&lt;MeanBackward0&gt;) . loss.backward() params.grad . tensor([-863.2866, -3.5042, -63.3594]) . lr = 0.0005 def apply_step(): loss = mse() loss.backward() params.data -= lr * params.grad.data params.grad = None print(loss.item()) . params = origs.detach().requires_grad_() origs = params.clone() for _ in range(9): apply_step() . 1542.23388671875 1191.165771484375 922.902099609375 717.9000244140625 561.22900390625 441.48260498046875 349.94647216796875 279.96307373046875 226.4463348388672 . origs . tensor([-1., -2., -3.], grad_fn=&lt;CloneBackward0&gt;) . params = origs.detach().requires_grad_() _, axs = plt.subplots(3,3, figsize=(24, 24)) for i in range(9): pos = (i//3, i%3) axs[pos].scatter(x, y) axs[pos].scatter(x, f(params).detach().cpu().numpy(), color=&#39;red&#39;) apply_step() . 1542.23388671875 1191.165771484375 922.902099609375 717.9000244140625 561.22900390625 441.48260498046875 349.94647216796875 279.96307373046875 226.4463348388672 .",
            "url": "https://doyu.github.io/blog/2022/08/03/Simple-Pytorch-SGD.html",
            "relUrl": "/2022/08/03/Simple-Pytorch-SGD.html",
            "date": " • Aug 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://doyu.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://doyu.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://doyu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://doyu.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}